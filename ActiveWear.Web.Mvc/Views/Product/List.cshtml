@model IEnumerable<ProductViewModel>

@{
    ViewData["Title"] = "Product List";
}

<h2>Products</h2>

<!-- Filtering Section -->
<div id="filters">
    <input type="text" id="nameFilter" placeholder="Filter by Name" onkeyup="filterProducts()" />
    <input type="text" id="categoryFilter" placeholder="Filter by Category" onkeyup="filterProducts()" />
    <input type="text" id="brandFilter" placeholder="Filter by Brand" onkeyup="filterProducts()" />
</div>

<!-- Products Table -->
<table id="productsTable">
    <thead>
        <tr>
            <th onclick="sortTable(0, 'string')">Name</th>
            <th>Description</th>
            <th onclick="sortTable(2, 'number')">Price</th>
            <th onclick="sortTable(3, 'string')">Category</th>
            <th onclick="sortTable(4, 'string')">Brand</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model)
        {
            <tr class="productRow">
                <td><a asp-controller="Product" asp-action="Details" asp-route-id=@product.Id>@product.Name</a></td>
                <td>@product.Description</td>
                <td>@product.Price</td>
                <td>@product.ProductCategory?.Name</td>
                <td>@product.ProductBrand?.Name</td>
            </tr>
        }
    </tbody>
</table>

@section Styles {
    <style>
        /* Styles for filtering section and table */
        #filters {
            margin-bottom: 20px;
        }
        #filters input {
            padding: 10px;
            margin-right: 10px;
        }
        #productsTable {
            width: 100%;
            border-collapse: collapse;
        }
        #productsTable th, #productsTable td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        #productsTable th {
            cursor: pointer;
            background-color: #f2f2f2;
        }
        .productRow:hover {
            background-color: #ddd;
        }
    </style>
}

@section Scripts {
    <script>
        // JavaScript for sorting and filtering
        function sortTable(column, type) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("productsTable");
            switching = true;
            // Set the sorting direction to ascending
            dir = "asc"; 
            // Make a loop that will continue until no switching has been done
            while (switching) {
                // Start by saying: no switching is done
                switching = false;
                rows = table.rows;
                // Loop through all table rows (except the first, which contains table headers)
                for (i = 1; i < (rows.length - 1); i++) {
                    // Start by saying there should be no switching
                    shouldSwitch = false;
                    // Get the two elements to compare, one from current row and one from the next
                    x = rows[i].getElementsByTagName("TD")[column];
                    y = rows[i + 1].getElementsByTagName("TD")[column];
                    // Check if the two rows should switch place, based on the direction, asc or desc
                    if (type === 'number') {
                        if (dir == "asc" && parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        } else if (dir == "desc" && parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    } else {
                        if (dir == "asc" && x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        } else if (dir == "desc" && x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    // If a switch has been marked, make the switch and mark that a switch has been done
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1
                    switchcount ++; 
                } else {
                    // If no switching has been done AND the direction is "asc", set the direction to "desc" and run the while loop again
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }

        function filterProducts() {
            var nameFilter, categoryFilter, brandFilter, table, tr, td, i;
            nameFilter = document.getElementById("nameFilter").value.toUpperCase();
            categoryFilter = document.getElementById("categoryFilter").value.toUpperCase();
            brandFilter = document.getElementById("brandFilter").value.toUpperCase();
            table = document.getElementById("productsTable");
            tr = table.getElementsByTagName("tr");

            // Loop through all table rows, and hide those who don't match the search query
            for (i = 1; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td");
                if (td.length > 0) {
                    if (td[0].innerHTML.toUpperCase().indexOf(nameFilter) > -1 &&
                        td[3].innerHTML.toUpperCase().indexOf(categoryFilter) > -1 &&
                        td[4].innerHTML.toUpperCase().indexOf(brandFilter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                } 
            }
        }
    </script>
}

